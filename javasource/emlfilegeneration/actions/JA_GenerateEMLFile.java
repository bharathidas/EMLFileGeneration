// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package emlfilegeneration.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.activation.MimetypesFileTypeMap;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;

public class JA_GenerateEMLFile extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String From;
	private java.lang.String To;
	private java.lang.String CC;
	private java.lang.String BCC;
	private java.lang.String Subject;
	private java.lang.String HTMLBody;
	private java.util.Date DateSent;
	private java.lang.String EMLFileName;
	private IMendixObject __OutputFileDocument;
	private system.proxies.FileDocument OutputFileDocument;
	private java.util.List<IMendixObject> __AttachmentList;
	private java.util.List<system.proxies.FileDocument> AttachmentList;

	public JA_GenerateEMLFile(IContext context, java.lang.String From, java.lang.String To, java.lang.String CC, java.lang.String BCC, java.lang.String Subject, java.lang.String HTMLBody, java.util.Date DateSent, java.lang.String EMLFileName, IMendixObject OutputFileDocument, java.util.List<IMendixObject> AttachmentList)
	{
		super(context);
		this.From = From;
		this.To = To;
		this.CC = CC;
		this.BCC = BCC;
		this.Subject = Subject;
		this.HTMLBody = HTMLBody;
		this.DateSent = DateSent;
		this.EMLFileName = EMLFileName;
		this.__OutputFileDocument = OutputFileDocument;
		this.__AttachmentList = AttachmentList;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OutputFileDocument = this.__OutputFileDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), __OutputFileDocument);

		this.AttachmentList = java.util.Optional.ofNullable(this.__AttachmentList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__AttachmentListElement -> system.proxies.FileDocument.initialize(getContext(), __AttachmentListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		ILogNode logger = Core.getLogger("Generate EML File");
		boolean emailWriteSuccess = false;

		if (From.isEmpty() || To.isEmpty() || DateSent == null) {
			logger.warn("From, To, and DateSent should not be empty");
			return false;
		}

		String attachments = "";

		if (!__AttachmentList.isEmpty()) {
			for (IMendixObject attachment : __AttachmentList) {
				logger.info("id: " + attachment.getId());
				if (attachment != null) {
					logger.info("attachment not null: " + attachment.getId());
					InputStream content = Core.getFileDocumentContent(getContext(), attachment);
					String mimeType = (new MimetypesFileTypeMap())
							.getContentType((String) attachment.getValue(getContext(), FILE_DOCUMENT_NAME));

					try {
						if (content != null) {
							logger.info("content not null: " + attachment.getId());
							String fileName = (String) attachment.getValue(getContext(), FILE_DOCUMENT_NAME);
							attachments += "Content-Disposition: attachment; filename=" + fileName + ";\n"
									+ "Content-Type: " + mimeType + "; name=" + fileName + ";\n\n"
									+ new String(content.readAllBytes(), StandardCharsets.UTF_8) + "\n\n";
						}
					} catch (Exception e) {
						throw new CoreException("Unable to attach attachment. " + e);
					}
				}
			}
		}

		StringBuilder EML = new StringBuilder();
		EML.append("From: " + From + "\n");
		EML.append("To: " + To + "\n");
		EML.append("CC: " + (CC == null ? "" : CC) + "\n");
		EML.append("BCC: " + (BCC == null ? "" : BCC) + "\n");
		EML.append("Subject: " + Subject + "\n");
		EML.append("Date: " + DateSent + "\n");
		EML.append("MIME-Version: 1.0\n");
		EML.append("Content-Type: multipart/mixed; boundary=frontier\n\n");
		EML.append("--frontier\n");
		EML.append("Content-Type: text/html; charset=utf-8\n\n");
		EML.append(HTMLBody + "\n");
		EML.append("--frontier\n");
		EML.append(attachments);
		String FileName;
		if (Subject != null && Subject != "") {
			FileName = Subject;
		} else {
			FileName = EMLFileName;
		}
				
		Pattern pt = Pattern.compile("[^a-zA-Z0-9]");
		Matcher match = pt.matcher(FileName);
		while (match.find()) {
			String s = match.group();
			FileName = FileName.replaceAll("\\" + s, " ");
		}
		FileName = FileName.trim();

		String temppath = Core.getConfiguration().getTempPath().getAbsolutePath();

		String EMLFileNameValue = FileName + ".eml";
		String filePath = temppath + "/" + EMLFileNameValue;
		try (FileOutputStream fos = new FileOutputStream(filePath)) {
			fos.write(EML.toString().getBytes(StandardCharsets.UTF_8));
			try (FileInputStream fis = new FileInputStream(filePath)) {
				OutputFileDocument.setName(EMLFileNameValue);
				Core.storeFileDocumentContent(getContext(), OutputFileDocument.getMendixObject(), EMLFileNameValue,
						fis);
			}
		} catch (IOException e) {
			throw new CoreException("Unable to write EML file. " + e);
		}

		return true;

		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_GenerateEMLFile";
	}

	// BEGIN EXTRA CODE
	private final static String FILE_DOCUMENT_NAME = "Name";
	// END EXTRA CODE
}
