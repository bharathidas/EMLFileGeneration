// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package emlfilegeneration.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Date;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.MimetypesFileTypeMap;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;

public class JA_GenerateEMLFile extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String From;
	private java.lang.String To;
	private java.lang.String CC;
	private java.lang.String BCC;
	private java.lang.String Subject;
	private java.lang.String HTMLBody;
	private java.util.Date DateSent;
	private java.lang.String EMLFileName;
	private IMendixObject __OutputFileDocument;
	private system.proxies.FileDocument OutputFileDocument;
	private java.util.List<IMendixObject> __AttachmentList;
	private java.util.List<system.proxies.FileDocument> AttachmentList;

	public JA_GenerateEMLFile(IContext context, java.lang.String From, java.lang.String To, java.lang.String CC, java.lang.String BCC, java.lang.String Subject, java.lang.String HTMLBody, java.util.Date DateSent, java.lang.String EMLFileName, IMendixObject OutputFileDocument, java.util.List<IMendixObject> AttachmentList)
	{
		super(context);
		this.From = From;
		this.To = To;
		this.CC = CC;
		this.BCC = BCC;
		this.Subject = Subject;
		this.HTMLBody = HTMLBody;
		this.DateSent = DateSent;
		this.EMLFileName = EMLFileName;
		this.__OutputFileDocument = OutputFileDocument;
		this.__AttachmentList = AttachmentList;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.OutputFileDocument = this.__OutputFileDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), __OutputFileDocument);

		this.AttachmentList = java.util.Optional.ofNullable(this.__AttachmentList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__AttachmentListElement -> system.proxies.FileDocument.initialize(getContext(), __AttachmentListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		ILogNode logger = Core.getLogger("Generate EML File");

		boolean emailWriteSuccess = false;
		
	
		if (From.isEmpty() || To.isEmpty() ||  DateSent==null) {
			logger.error("From,To and DateSent should not be empty");
			return false;
		}
		
		Message msg = createMessage(From, To, CC, BCC, Subject, HTMLBody, DateSent);
		Multipart multipart = new MimeMultipart();

		// creates body part for the message
		MimeBodyPart messageBodyPart = new MimeBodyPart();
		messageBodyPart.setContent(HTMLBody, "text/html; charset=utf-8");

		
		

		if (!__AttachmentList.isEmpty()) { // If returns false, will continue to add attachment.
			for (IMendixObject attachment : __AttachmentList) {
				logger.info("id::" + attachment.getId());
				if (attachment != null) {
					logger.info("inside attachment not null::" + attachment.getId());
					InputStream content = Core.getFileDocumentContent(getContext(), attachment);
					String mimeType = (new MimetypesFileTypeMap())
							.getContentType((String) attachment.getValue(getContext(), FILE_DOCUMENT_NAME));

					try {
						if (content != null) {
							logger.info("inside content not null::" + attachment.getId());
							// creates body part for the attachment
							MimeBodyPart attachPart = new MimeBodyPart();
							DataSource source = new ByteArrayDataSource(content, mimeType);
							String fileName = (String) attachment.getValue(getContext(), FILE_DOCUMENT_NAME);
							attachPart.setDataHandler(new DataHandler(source));
							attachPart.setFileName(fileName);
							// adds parts to the multipart
							multipart.addBodyPart(attachPart);
							
						}

					} catch (Exception e) {
						throw new CoreException("Unable to attach attachment. " + e);
					}
				}
			}
		}
		
		// sets the Message body part
		multipart.addBodyPart(messageBodyPart);

		// sets the multipart as message's content
		msg.setContent(multipart);

		String temppath = Core.getConfiguration().getTempPath().getAbsolutePath();
		
		String EMLFileNameValue=EMLFileName + ".eml";
		String FilePath = temppath + "/" + EMLFileNameValue;
		
		File tempFile1 = new File(FilePath);
		FileOutputStream fos = new FileOutputStream(tempFile1);
		msg.writeTo(fos);
		FileInputStream fis = new FileInputStream(tempFile1);
		OutputFileDocument.setName(EMLFileNameValue);
	
		Core.storeFileDocumentContent(getContext(), OutputFileDocument.getMendixObject(), EMLFileNameValue, fis);
		
		emailWriteSuccess = true;
		
		return emailWriteSuccess;
		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_GenerateEMLFile";
	}

	// BEGIN EXTRA CODE
	private final static String FILE_DOCUMENT_NAME = "Name";
	
	
	public MimeMessage createMessage(String from, String to, String cc, String bcc, String subject, String body,
			Date date) throws MessagingException {
		MimeMessage msg = new MimeMessage(Session.getInstance(System.getProperties()));
		msg.setFrom(new InternetAddress(from));
		msg.setRecipients(Message.RecipientType.TO, to);
		if (cc!=null) {
			msg.setRecipients(Message.RecipientType.CC, cc);	
		}
		if (bcc!=null) {
			msg.setRecipients(Message.RecipientType.BCC, bcc);
		}
		if (subject!=null) {
			msg.setSubject(subject);
		}
		
		msg.setSentDate(date);
		return msg;
	}
	
	// END EXTRA CODE
}
